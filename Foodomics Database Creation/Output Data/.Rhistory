#Get the data and aggregate it so that there is only one DATT value per diet record
setwd(patientfolder)
data_type<-read.csv(file='Daily_Intake.txt', header=TRUE, sep="\t", na.strings=c("","NA"))
Data.Type<-data_type[,c(1,2,4)]
#Data.Type<-rename(Data.Type, Date=Date.of.Intake)
Data.Type<-rename(Data.Type, DATT=Data_Quality)
Data.Type<-aggregate(Data.Type$DATT, by=list(Data.Type$Date,Data.Type$MRNUMBER), max)
Data.Type<-rename(Data.Type, Date=Group.1)
Data.Type<-rename(Data.Type, MRNUMBER=Group.2)
Data.Type<-rename(Data.Type, DATT=x)
#Fill in the time series
Data.Type$Date<-as.POSIXct(Data.Type$Date,format="%m/%d/%y")
Data.Type.zoo<-zoo(Data.Type[,-1],Data.Type[,c("Date")]) #set date to Index
df2 <- merge(Data.Type.zoo,zoo(,seq(start(Data.Type.zoo),end(Data.Type.zoo),by="DSTday")), all=TRUE)
Data.Type<-as.data.frame(df2)
Data.Type$Date<-row.names(Data.Type)
#Data.Type<-rename(Data.Type, DATT=df2)
##################
####DAY QUALITY###
##################
#Get the data and aggregate it so that there is only one value per date
setwd(patientfolder)
day_type<-read.csv(file='Daily_Intake.txt', header=TRUE, sep="\t", na.strings=c("","NA"))
Day.Type<-day_type[,c(1,2,5)]
#Day.Type<-rename(Day.Type, Date=Date.of.Intake)
Day.Type<-rename(Day.Type, DAYT=Day_Quality)
Day.Type<-aggregate(Day.Type$DAYT, by=list(Day.Type$Date,Day.Type$MRNUMBER), max)
Day.Type<-rename(Day.Type, Date=Group.1)
Day.Type<-rename(Day.Type, MRNUMBER=Group.2)
Day.Type<-rename(Day.Type, DAYT=x)
#Fill in the time series
Day.Type$Date<-as.POSIXct(Day.Type$Date,format="%m/%d/%y")
Day.Type.zoo<-zoo(Day.Type[,-1],Day.Type[,c("Date")]) #set date to Index
df2 <- merge(Day.Type.zoo,zoo(,seq(start(Day.Type.zoo),end(Day.Type.zoo),by="DSTday")), all=TRUE)
Day.Type<-as.data.frame(df2)
Day.Type$Date<-row.names(Day.Type)
#Day.Type<-rename(Day.Type, DAYT=df2)
#MERGE DAY TYPE AND DATA TYPE
types<-merge(Day.Type,Data.Type,by=c("MRNUMBER","Date"))
###############
###MERGE ALL###
###############
#MERGE THE DAILY INTAKE DATA WITH THE QUALITY DATA
wide_daily_intakes<-merge(final,types,by=c("MRNUMBER","Date"))
#wide_daily_intakes<-wide_daily_intakes[,c(1:7,9:10)] #remove unneeded date column
######################################################
##############Bring in Diet Change Info###############
######################################################
####Now, we need to bring in the data about the diet prescription changes.
setwd(patientfolder)
diet_changes<-read.csv(file='Diet_Rx.txt', header=TRUE, sep="\t") #NEED TO ADD MRNUMBER TO THIS FILE
diet_changes<-diet_changes[!diet_changes$Date_of_Change=="", ] #gets rid of any blank rows in the file
diet_changes[is.na(diet_changes)]<- "0" #gives a 0 to any blank cell for calculation purposes
cols = c(4:13);     #these are the columns that actually have diet prescription information in them
diet_changes[,cols] = apply(diet_changes[,cols], 2, function(x) as.numeric(as.character(x)))
diet_changes$sum<-rowSums(diet_changes[, cols])
#Fill in the time series.  #########I may want to imrpove this later because really each unique line here is simply the diet prescription identifier
diet_changes$Date_of_Change<-as.POSIXct(diet_changes$Date_of_Change,format="%m/%d/%y")
diet_changes <- aggregate(diet_changes$sum, by=list(diet_changes$Date_of_Change), max)
diet_changes.zoo<-zoo(diet_changes[,-1],diet_changes[,1]) #set date to Index
df2 <- merge(diet_changes.zoo,zoo(,seq(start(diet_changes.zoo),end(diet_changes.zoo),by="DSTday")), all=TRUE)
diet_changes<-as.data.frame(df2)
diet_changes$Date<-row.names(diet_changes)
diet_changes<-rename(diet_changes, sum=df2)
#diet_changes[is.na(diet_changes)]<- "0"
diet_changes$sum2<-na.locf(diet_changes$sum)
###############
###MERGE ALL###
###############
#merge the diet change data with the daily intake data
final_daily_intake<-merge(wide_daily_intakes,diet_changes[, c("Date", "sum2")],by="Date", all=TRUE)
#Now we have a dataframe that we can use to implement LCOF and NOCB methods that rely on the changes in the Reason.For.Change column
#We will need to prune this dataframe to the dates that the patient was actually on therapy for.
####################################################################
setDT(final_daily_intake)
final_daily_intake2<-final_daily_intake[,intakecode:=na.locf(intakecode,na.rm=TRUE,fromLast=FALSE),
by=as.factor(sum2)]
final_daily_intake2<-final_daily_intake2[,intakecode:=na.locf(intakecode,na.rm=TRUE,fromLast=TRUE)]
##TEXT TO COLUMNS FOR INTAKE CODE DATA, probably not ready to go yet
setDT(final_daily_intake2)[, paste0("Column", 1:5) := tstrsplit(intakecode, ",")]
#Melt the data so that we can being to import the profile information
final_daily_intake2<-as.data.frame(final_daily_intake2)
final_daily_intake3 <- final_daily_intake2[,colSums(is.na(final_daily_intake2))<nrow(final_daily_intake2)]
pruned<-final_daily_intake3[,c(1:2,7:12)]
melted_daily_intakes<-melt(pruned, id.vars = c("Date","MRNUMBER"))
melted_daily_intakes<-melted_daily_intakes[!melted_daily_intakes$value=="NA",]
#Rename these variables
melted_daily_intakes<-rename(melted_daily_intakes, PKT_Recipe_Number=value)
write.csv(melted_daily_intakes , file="melted_daily_intakes.csv")
#test2[,c(paste0("ME_", 1:9))]<-str_split_fixed(test2$intakecode, ",", 9)
#Required Docs (all in same folder)
#----Daily intakes saved as .csv file with date formatted as mm/dd/yyyy hh:mmm
#----New Data Tracking for obtaining diet changes (up to date)
#----Demographics table for obtaining the start date
#(and for obtaining the stop date when needed, and for counting diet prescriptions)
#Required Formatting of Required Docs
#----for all sheets, right click date, select format values,
#choose date, choose 03/12/2015 (for example)
#Explanation: The time series will be created by
#----1) using dates from new data tracking
#(fill in list of dates from first date to last date available)
#----2) merge this time series with the time series from the daily intake data
#----3) prune the whole time series using the information from the demographics table
#Load foodomics dataset
#foodomicsDB<-readRDS("foodomicsDB.RDS")
######################################################
##########Create the Full Length Time Series##########
######################################################
#Load the daily data
setwd(patientfolder)
daily_intakes<-read.csv(file='Daily_Intake.txt', header=TRUE, sep="\t", na.strings=c("","NA"))
#Take first two columns that have Date and ME number information
daily_intakes<-daily_intakes[,c(1:3)]
#Rename these variables
daily_intakes<-rename(daily_intakes, ME=PKT_Recipe_Number)
dt <- data.table(daily_intakes) #after this the date is mm/dd/yy 12:00 AM
test<-dt[, number := 1:.N, by = Date] #this numbers every row in the dt by date
data<-as.data.frame(test) #this converts the dt to a dataframe
data_wide <- reshape(data, direction="wide", idvar = c("MRNUMBER","Date"), timevar = "number")
#this reshape function casts the data frame into wide format, head(data_wide) to see
#this creates a column for each ME, meaning the max number of ME a patient has
#is the number of columns that are created, different for each patient
#Removes any rows that are empty
#data_wide<-data_wide[-which(data_wide == ""),]
#This pastes all ME columns together
cols<-names(data_wide[, c(3:ncol(data_wide))])
data_wide$intakecode<- as.factor(ifelse(is.na(data_wide$ME.1), data_wide$ME.1,
apply( data_wide[ , cols ] , 1 , paste , collapse = "," )))
########Maybe get rid of the other ME data
data_wide<-data_wide[,c("MRNUMBER","Date","intakecode")]
#################
###TIME SERIES###
#################
data_wide$Date<-as.POSIXct(data_wide$Date,format="%m/%d/%y") # now date is formatted yyyy/mm/dd
data_wide.zoo<-zoo(data_wide[,],data_wide[,c("Date")]) #set date to Index in a zoo time series object
df2 <- merge(data_wide.zoo,zoo(,seq(start(data_wide.zoo),end(data_wide.zoo),by="DSTday")), all=TRUE)
#fills in time series from the start of the first time series object to
#the end of the first time series object
final<-as.data.frame(df2) #make the zoo time series object a dataframe
#final2<-final[ !grepl( "23:00" , rownames(final) ) ,  ]
final$Date<-row.names(final)
######################################################
###########Bring in Data and Day Type Info############
######################################################
##################
###DATA QUALITY###
##################
#Get the data and aggregate it so that there is only one DATT value per diet record
setwd(patientfolder)
data_type<-read.csv(file='Daily_Intake.txt', header=TRUE, sep="\t", na.strings=c("","NA"))
Data.Type<-data_type[,c(1,2,4)]
#Data.Type<-rename(Data.Type, Date=Date.of.Intake)
Data.Type<-rename(Data.Type, DATT=Data_Quality)
Data.Type<-aggregate(Data.Type$DATT, by=list(Data.Type$Date,Data.Type$MRNUMBER), max)
Data.Type<-rename(Data.Type, Date=Group.1)
Data.Type<-rename(Data.Type, MRNUMBER=Group.2)
Data.Type<-rename(Data.Type, DATT=x)
#Fill in the time series
Data.Type$Date<-as.POSIXct(Data.Type$Date,format="%m/%d/%y")
Data.Type.zoo<-zoo(Data.Type[,-1],Data.Type[,c("Date")]) #set date to Index
df2 <- merge(Data.Type.zoo,zoo(,seq(start(Data.Type.zoo),end(Data.Type.zoo),by="DSTday")), all=TRUE)
Data.Type<-as.data.frame(df2)
Data.Type$Date<-row.names(Data.Type)
#Data.Type<-rename(Data.Type, DATT=df2)
##################
####DAY QUALITY###
##################
#Get the data and aggregate it so that there is only one value per date
setwd(patientfolder)
day_type<-read.csv(file='Daily_Intake.txt', header=TRUE, sep="\t", na.strings=c("","NA"))
Day.Type<-day_type[,c(1,2,5)]
#Day.Type<-rename(Day.Type, Date=Date.of.Intake)
Day.Type<-rename(Day.Type, DAYT=Day_Quality)
Day.Type<-aggregate(Day.Type$DAYT, by=list(Day.Type$Date,Day.Type$MRNUMBER), max)
Day.Type<-rename(Day.Type, Date=Group.1)
Day.Type<-rename(Day.Type, MRNUMBER=Group.2)
Day.Type<-rename(Day.Type, DAYT=x)
#Fill in the time series
Day.Type$Date<-as.POSIXct(Day.Type$Date,format="%m/%d/%y")
Day.Type.zoo<-zoo(Day.Type[,-1],Day.Type[,c("Date")]) #set date to Index
df2 <- merge(Day.Type.zoo,zoo(,seq(start(Day.Type.zoo),end(Day.Type.zoo),by="DSTday")), all=TRUE)
Day.Type<-as.data.frame(df2)
Day.Type$Date<-row.names(Day.Type)
#Day.Type<-rename(Day.Type, DAYT=df2)
#MERGE DAY TYPE AND DATA TYPE
types<-merge(Day.Type,Data.Type,by=c("MRNUMBER","Date"))
###############
###MERGE ALL###
###############
#MERGE THE DAILY INTAKE DATA WITH THE QUALITY DATA
wide_daily_intakes<-merge(final,types,by=c("MRNUMBER","Date"))
#wide_daily_intakes<-wide_daily_intakes[,c(1:7,9:10)] #remove unneeded date column
######################################################
##############Bring in Diet Change Info###############
######################################################
####Now, we need to bring in the data about the diet prescription changes.
setwd(patientfolder)
diet_changes<-read.csv(file='Diet_Rx.txt', header=TRUE, sep="\t") #NEED TO ADD MRNUMBER TO THIS FILE
diet_changes<-diet_changes[!diet_changes$Date_of_Change=="", ] #gets rid of any blank rows in the file
diet_changes[is.na(diet_changes)]<- "0" #gives a 0 to any blank cell for calculation purposes
cols = c(4:13);     #these are the columns that actually have diet prescription information in them
diet_changes[,cols] = apply(diet_changes[,cols], 2, function(x) as.numeric(as.character(x)))
diet_changes$sum<-rowSums(diet_changes[, cols])
#Fill in the time series.  #########I may want to imrpove this later because really each unique line here is simply the diet prescription identifier
diet_changes$Date_of_Change<-as.POSIXct(diet_changes$Date_of_Change,format="%m/%d/%y")
diet_changes <- aggregate(diet_changes$sum, by=list(diet_changes$Date_of_Change), max)
diet_changes.zoo<-zoo(diet_changes[,-1],diet_changes[,1]) #set date to Index
df2 <- merge(diet_changes.zoo,zoo(,seq(start(diet_changes.zoo),end(diet_changes.zoo),by="DSTday")), all=TRUE)
diet_changes<-as.data.frame(df2)
diet_changes$Date<-row.names(diet_changes)
diet_changes<-rename(diet_changes, sum=df2)
#diet_changes[is.na(diet_changes)]<- "0"
diet_changes$sum2<-na.locf(diet_changes$sum)
###############
###MERGE ALL###
###############
#merge the diet change data with the daily intake data
final_daily_intake<-merge(wide_daily_intakes,diet_changes[, c("Date", "sum2")],by="Date", all=TRUE)
#Now we have a dataframe that we can use to implement LCOF and NOCB methods that rely on the changes in the Reason.For.Change column
#We will need to prune this dataframe to the dates that the patient was actually on therapy for.
####################################################################
setDT(final_daily_intake)
final_daily_intake2<-final_daily_intake[,intakecode:=na.locf(intakecode,na.rm=TRUE,fromLast=FALSE),
by=as.factor(sum2)]
final_daily_intake2<-final_daily_intake2[,intakecode:=na.locf(intakecode,na.rm=TRUE,fromLast=TRUE)]
##TEXT TO COLUMNS FOR INTAKE CODE DATA, probably not ready to go yet
setDT(final_daily_intake2)[, paste0("Column", 1:7) := tstrsplit(intakecode, ",")]
#Melt the data so that we can being to import the profile information
final_daily_intake2<-as.data.frame(final_daily_intake2)
final_daily_intake3 <- final_daily_intake2[,colSums(is.na(final_daily_intake2))<nrow(final_daily_intake2)]
pruned<-final_daily_intake3[,c(1:2,7:12)]
melted_daily_intakes<-melt(pruned, id.vars = c("Date","MRNUMBER"))
melted_daily_intakes<-melted_daily_intakes[!melted_daily_intakes$value=="NA",]
#Rename these variables
melted_daily_intakes<-rename(melted_daily_intakes, PKT_Recipe_Number=value)
write.csv(melted_daily_intakes , file="melted_daily_intakes.csv")
#test2[,c(paste0("ME_", 1:9))]<-str_split_fixed(test2$intakecode, ",", 9)
#Required Docs (all in same folder)
#----Daily intakes saved as .csv file with date formatted as mm/dd/yyyy hh:mmm
#----New Data Tracking for obtaining diet changes (up to date)
#----Demographics table for obtaining the start date
#(and for obtaining the stop date when needed, and for counting diet prescriptions)
#Required Formatting of Required Docs
#----for all sheets, right click date, select format values,
#choose date, choose 03/12/2015 (for example)
#Explanation: The time series will be created by
#----1) using dates from new data tracking
#(fill in list of dates from first date to last date available)
#----2) merge this time series with the time series from the daily intake data
#----3) prune the whole time series using the information from the demographics table
#Load foodomics dataset
#foodomicsDB<-readRDS("foodomicsDB.RDS")
######################################################
##########Create the Full Length Time Series##########
######################################################
#Load the daily data
setwd(patientfolder)
daily_intakes<-read.csv(file='Daily_Intake.txt', header=TRUE, sep="\t", na.strings=c("","NA"))
#Take first two columns that have Date and ME number information
daily_intakes<-daily_intakes[,c(1:3)]
#Rename these variables
daily_intakes<-rename(daily_intakes, ME=PKT_Recipe_Number)
dt <- data.table(daily_intakes) #after this the date is mm/dd/yy 12:00 AM
test<-dt[, number := 1:.N, by = Date] #this numbers every row in the dt by date
data<-as.data.frame(test) #this converts the dt to a dataframe
data_wide <- reshape(data, direction="wide", idvar = c("MRNUMBER","Date"), timevar = "number")
#this reshape function casts the data frame into wide format, head(data_wide) to see
#this creates a column for each ME, meaning the max number of ME a patient has
#is the number of columns that are created, different for each patient
#Removes any rows that are empty
#data_wide<-data_wide[-which(data_wide == ""),]
#This pastes all ME columns together
cols<-names(data_wide[, c(3:ncol(data_wide))])
data_wide$intakecode<- as.factor(ifelse(is.na(data_wide$ME.1), data_wide$ME.1,
apply( data_wide[ , cols ] , 1 , paste , collapse = "," )))
########Maybe get rid of the other ME data
data_wide<-data_wide[,c("MRNUMBER","Date","intakecode")]
#################
###TIME SERIES###
#################
data_wide$Date<-as.POSIXct(data_wide$Date,format="%m/%d/%y") # now date is formatted yyyy/mm/dd
data_wide.zoo<-zoo(data_wide[,],data_wide[,c("Date")]) #set date to Index in a zoo time series object
df2 <- merge(data_wide.zoo,zoo(,seq(start(data_wide.zoo),end(data_wide.zoo),by="DSTday")), all=TRUE)
#fills in time series from the start of the first time series object to
#the end of the first time series object
final<-as.data.frame(df2) #make the zoo time series object a dataframe
#final2<-final[ !grepl( "23:00" , rownames(final) ) ,  ]
final$Date<-row.names(final)
######################################################
###########Bring in Data and Day Type Info############
######################################################
##################
###DATA QUALITY###
##################
#Get the data and aggregate it so that there is only one DATT value per diet record
setwd(patientfolder)
data_type<-read.csv(file='Daily_Intake.txt', header=TRUE, sep="\t", na.strings=c("","NA"))
Data.Type<-data_type[,c(1,2,4)]
#Data.Type<-rename(Data.Type, Date=Date.of.Intake)
Data.Type<-rename(Data.Type, DATT=Data_Quality)
Data.Type<-aggregate(Data.Type$DATT, by=list(Data.Type$Date,Data.Type$MRNUMBER), max)
Data.Type<-rename(Data.Type, Date=Group.1)
Data.Type<-rename(Data.Type, MRNUMBER=Group.2)
Data.Type<-rename(Data.Type, DATT=x)
#Fill in the time series
Data.Type$Date<-as.POSIXct(Data.Type$Date,format="%m/%d/%y")
Data.Type.zoo<-zoo(Data.Type[,-1],Data.Type[,c("Date")]) #set date to Index
df2 <- merge(Data.Type.zoo,zoo(,seq(start(Data.Type.zoo),end(Data.Type.zoo),by="DSTday")), all=TRUE)
Data.Type<-as.data.frame(df2)
Data.Type$Date<-row.names(Data.Type)
#Data.Type<-rename(Data.Type, DATT=df2)
##################
####DAY QUALITY###
##################
#Get the data and aggregate it so that there is only one value per date
setwd(patientfolder)
day_type<-read.csv(file='Daily_Intake.txt', header=TRUE, sep="\t", na.strings=c("","NA"))
Day.Type<-day_type[,c(1,2,5)]
#Day.Type<-rename(Day.Type, Date=Date.of.Intake)
Day.Type<-rename(Day.Type, DAYT=Day_Quality)
Day.Type<-aggregate(Day.Type$DAYT, by=list(Day.Type$Date,Day.Type$MRNUMBER), max)
Day.Type<-rename(Day.Type, Date=Group.1)
Day.Type<-rename(Day.Type, MRNUMBER=Group.2)
Day.Type<-rename(Day.Type, DAYT=x)
#Fill in the time series
Day.Type$Date<-as.POSIXct(Day.Type$Date,format="%m/%d/%y")
Day.Type.zoo<-zoo(Day.Type[,-1],Day.Type[,c("Date")]) #set date to Index
df2 <- merge(Day.Type.zoo,zoo(,seq(start(Day.Type.zoo),end(Day.Type.zoo),by="DSTday")), all=TRUE)
Day.Type<-as.data.frame(df2)
Day.Type$Date<-row.names(Day.Type)
#Day.Type<-rename(Day.Type, DAYT=df2)
#MERGE DAY TYPE AND DATA TYPE
types<-merge(Day.Type,Data.Type,by=c("MRNUMBER","Date"))
###############
###MERGE ALL###
###############
#MERGE THE DAILY INTAKE DATA WITH THE QUALITY DATA
wide_daily_intakes<-merge(final,types,by=c("MRNUMBER","Date"))
#wide_daily_intakes<-wide_daily_intakes[,c(1:7,9:10)] #remove unneeded date column
######################################################
##############Bring in Diet Change Info###############
######################################################
####Now, we need to bring in the data about the diet prescription changes.
setwd(patientfolder)
diet_changes<-read.csv(file='Diet_Rx.txt', header=TRUE, sep="\t") #NEED TO ADD MRNUMBER TO THIS FILE
diet_changes<-diet_changes[!diet_changes$Date_of_Change=="", ] #gets rid of any blank rows in the file
diet_changes[is.na(diet_changes)]<- "0" #gives a 0 to any blank cell for calculation purposes
cols = c(4:13);     #these are the columns that actually have diet prescription information in them
diet_changes[,cols] = apply(diet_changes[,cols], 2, function(x) as.numeric(as.character(x)))
diet_changes$sum<-rowSums(diet_changes[, cols])
#Fill in the time series.  #########I may want to imrpove this later because really each unique line here is simply the diet prescription identifier
diet_changes$Date_of_Change<-as.POSIXct(diet_changes$Date_of_Change,format="%m/%d/%y")
diet_changes <- aggregate(diet_changes$sum, by=list(diet_changes$Date_of_Change), max)
diet_changes.zoo<-zoo(diet_changes[,-1],diet_changes[,1]) #set date to Index
df2 <- merge(diet_changes.zoo,zoo(,seq(start(diet_changes.zoo),end(diet_changes.zoo),by="DSTday")), all=TRUE)
diet_changes<-as.data.frame(df2)
diet_changes$Date<-row.names(diet_changes)
diet_changes<-rename(diet_changes, sum=df2)
#diet_changes[is.na(diet_changes)]<- "0"
diet_changes$sum2<-na.locf(diet_changes$sum)
###############
###MERGE ALL###
###############
#merge the diet change data with the daily intake data
final_daily_intake<-merge(wide_daily_intakes,diet_changes[, c("Date", "sum2")],by="Date", all=TRUE)
#Now we have a dataframe that we can use to implement LCOF and NOCB methods that rely on the changes in the Reason.For.Change column
#We will need to prune this dataframe to the dates that the patient was actually on therapy for.
####################################################################
setDT(final_daily_intake)
final_daily_intake2<-final_daily_intake[,intakecode:=na.locf(intakecode,na.rm=TRUE,fromLast=FALSE),
by=as.factor(sum2)]
final_daily_intake2<-final_daily_intake2[,intakecode:=na.locf(intakecode,na.rm=TRUE,fromLast=TRUE)]
##TEXT TO COLUMNS FOR INTAKE CODE DATA, probably not ready to go yet
setDT(final_daily_intake2)[, paste0("Column", 1:7) := tstrsplit(intakecode, ",")]
#Melt the data so that we can being to import the profile information
final_daily_intake2<-as.data.frame(final_daily_intake2)
final_daily_intake3 <- final_daily_intake2[,colSums(is.na(final_daily_intake2))<nrow(final_daily_intake2)]
pruned<-final_daily_intake3[,c(1:2,7:12)]
melted_daily_intakes<-melt(pruned, id.vars = c("Date","MRNUMBER"))
melted_daily_intakes<-melted_daily_intakes[!melted_daily_intakes$value=="NA",]
#Rename these variables
melted_daily_intakes<-rename(melted_daily_intakes, PKT_Recipe_Number=value)
write.csv(melted_daily_intakes , file="melted_daily_intakes.csv")
#test2[,c(paste0("ME_", 1:9))]<-str_split_fixed(test2$intakecode, ",", 9)
setwd(patientfolder)
daily_menus<-read.csv(file='Menus.txt', header=TRUE, sep="\t", na.strings=c("","NA"))
library(dplyr)
#convert menus intakes to lowercase ID values
daily_menus$PKT_Recipe_Number<-tolower(daily_menus$PKT_Recipe_Number)
setwd("~/GitHub/foodomics/Foodomics Database Creation/Output Data")
foodomics<-readRDS(file="foodomics_DB_Apr_13_2016_11_08_25.rds")
setwd(patientfolder)
library(lubridate)
library(data.table)
dt <- data.table(daily_menus) #after this the date is mm/dd/yy 12:00 AM
test5<-dt[, number := 1:.N, by=c("MRNUMBER","PKT_Recipe_Number")] #this numbers every row in the dt by date
data<-as.data.frame(test5) #this converts the dt to a dataframe
#Make Menus in Wide Format
menus_ID<-data[,c("MRNUMBER","PKT_Recipe_Number","Ingredient_ID", "number")]
menus_wide_ID <- reshape(menus_ID, direction="wide", idvar = c("MRNUMBER","PKT_Recipe_Number"), timevar = "number")
#Working with the actual values
menus_Amt<-data[,c("MRNUMBER","PKT_Recipe_Number","PKT_Recipe_Ingredient_Amount", "number")]
menus_wide_amt <- reshape(menus_Amt, direction="wide", idvar = c("MRNUMBER","PKT_Recipe_Number"), timevar = "number")
#convert daily intakes to lowercase ID values
melted_daily_intakes$PKT_Recipe_Number<-tolower(melted_daily_intakes$PKT_Recipe_Number)
#Now we want to merge the wide menus with the daily intakes BY THE PKT RECIPE NUMBER
Foods_by_DI<-merge(melted_daily_intakes,menus_wide_ID, by=c("MRNUMBER","PKT_Recipe_Number"))
write.csv(Foods_by_DI , file="Foods_by_DI.csv")
#Now make the foods in long format so that we can attribute a profile to them from the foodomics database
Manyfoods_DI <- melt(Foods_by_DI ,  id.vars = c("MRNUMBER","PKT_Recipe_Number","Date","variable"), variable.name = 'PRODUCTNDID')
write.csv(Manyfoods_DI , file="Manyfoods_DI.csv")
#the above function generates a lot of rows with blank data, so lets get rid of them
clean_Manyfoods_DI<-Manyfoods_DI[!is.na(Manyfoods_DI$value),]
#Now we want to merge in the values to use in scaling
Foods_by_DI_2<-merge(melted_daily_intakes,menus_wide_amt, by=c("MRNUMBER","PKT_Recipe_Number"))
write.csv(Foods_by_DI_2, file="Foods_by_DI_2.csv")
#Now make the foods in long format so that we can attribute a profile to them from the foodomics database
Manyfoods_DI_2 <- melt(Foods_by_DI_2,  id.vars = c("MRNUMBER","PKT_Recipe_Number","Date","variable"), variable.name = 'Intake')
write.csv(Manyfoods_DI_2 , file="Manyfoods_DI_2.csv")
#the above function generates a lot of rows with blank data, so lets get rid of them
clean_Manyfoods_DI_2<-Manyfoods_DI_2[!is.na(Manyfoods_DI_2$value),]
####NOW COMBINE THE DATAFRAME WITH THE INGREDIENT NUMBERS AND AMOUNTS
############
############
############
############
############
#WINNER#####
############
############
############
############
clean_Manyfoods_DI$Intake<-clean_Manyfoods_DI_2$value
write.csv(clean_Manyfoods_DI, file="clean_Manyfoods_DI_comb.csv")
############
############
############
############
############
#WINNER#####
############
############
############
############
#fix dates so we can match appropriate profiles
foodomics$Date_Obtained<-as.numeric(foodomics$Date_Obtained)
foodomics$Date_Obtained<-as.Date(foodomics$Date_Obtained, origin = "1899-12-30")
foodomics$Date_Obtained[is.na(foodomics$Date_Obtained)] <- "2015-01-01"
foodomics$Date_Obtained<-as.POSIXlt(foodomics$Date_Obtained,format="%m/%d/%y")
Manyfoods_DI$Date<-as.POSIXlt(Manyfoods_DI$Date,format="%m/%d/%y")
attributes(Manyfoods_DI$MATCH_DATE)
attributes(foodomics$MATCH_DATE)
clean_Manyfoods_DI$Month<-month(clean_Manyfoods_DI$Date)
clean_Manyfoods_DI$Day<-day(clean_Manyfoods_DI$Date)
clean_Manyfoods_DI$Year<-year(clean_Manyfoods_DI$Date)
clean_Manyfoods_DI$MATCH_DATE<-paste(clean_Manyfoods_DI$Year, clean_Manyfoods_DI$Month, clean_Manyfoods_DI$Day, sep="-")
clean_Manyfoods_DI$MATCH_DATE<-as.Date(clean_Manyfoods_DI$MATCH_DATE)
foodomics$Month<-month(foodomics$Date_Obtained)
foodomics$Day<-day(foodomics$Date_Obtained)
foodomics$Year<-year(foodomics$Date_Obtained)
foodomics$MATCH_DATE<-paste(foodomics$Year, foodomics$Month, foodomics$Day, sep="-")
foodomics$MATCH_DATE<-as.Date(foodomics$MATCH_DATE)
#get list of NDIDs he ate
foodomics_eaten<- foodomics[foodomics$PRODUCTNDID %in% clean_Manyfoods_DI$value, ]
clean_Manyfoods_DI222<-clean_Manyfoods_DI[,-c(3:5,8:10)]
clean_Manyfoods_DI222$PRODUCTNDID<-clean_Manyfoods_DI222$value
memory.limit(size=20000)
temp <- abs(outer(clean_Manyfoods_DI222$MATCH_DATE,foodomics_eaten$MATCH_DATE,"-"))
ind <- apply(temp, 1, function(i) which.min(i))
ind<-as.numeric(ind)
result <- cbind(clean_Manyfoods_DI222, foodomics_eaten[ind,])
write.csv(result , file="result_not_summed.csv")
check_dates <- abs(outer(clean_Manyfoods_DI222$MATCH_DATE,foodomics_eaten$MATCH_DATE,"-")) #finds the closest date for every field pairing
check_ndid <- outer(clean_Manyfoods_DI222$PRODUCTNDID,foodomics_eaten$PRODUCTNDID,"==") #determines if the NDID was the same for each field pairing
check_ndid[check_ndid==0]<-NA #changes 0 to NA
check_all <- check_dates*check_ndid #multiply the two arrays together to get a conditionally valid list of closeness
best_match <- apply(check_all, 1, function(i) which.min(i)) #find the smallest value in each conditionally valid list
best_match <- as.numeric(best_match)
result <- cbind(clean_Manyfoods_DI222, foodomics_eaten[best_match,]) #merge the two arrays based on the result of the best_match array
write.csv(result , file="result_not_summed.csv")
#Calculations
result2 <- result[,c(1:5,19:204)]
result2[,-c(1:5)] <- sapply(result2[,-c(1:5)], as.numeric)
result3=as.data.frame(apply( result2[,-c(1:5)], 2, function(x) x *  result2$Intake / 100))
result3$MATCH_DATE<-result2$MATCH_DATE
write.csv(result3, file="result_scaled.csv")
#Columns to use in the sum for daily summary
#result4<-result3[,-c(1)]
#result_daily[,c(-175)] <- sapply(result_daily[,c(-175)], as.numeric)
result_daily_summed <- aggregate(x = result3[,-c(40:43,187)],
FUN = sum,
by = list(Group.date = result3$MATCH_DATE), na.rm=TRUE)
#result4 %>% group_by(MATCH_DATE) %>% summarise_each(funs(sum))
#notworking<-by(result4, result4$MATCH_DATE, function(x) colSums(result4[,-c(175)]))
write.csv(result_daily_summed, file="result_daily_summed.csv")
###This script will fun the foodomics analysis
#Step 1: Create reference database (of profiles to use in an analysis)
setwd("~/GitHub/foodomics/Foodomics Database Creation")
source("getBASEP.R")
#uses: getADJUSDA.R
#creates: referenceBASEP object
#Step 2
#----->Incomplete records are filled in with "NULL", which are treated as NA in database
#----->This is done manually in excel
#----->New empty variables are added, these variables are USDA variables that we do not collect from the label
#----->This requires a template that is formatted specifically for the historical food database (i.e. we need a new template for the 2016 food database)
#----->Result is saved as a tab delimited text file
#Step 3: Create foodomics database of Nutrition Facts Label Adjusted reference profiles
setwd("~/GitHub/foodomics/Foodomics Database Creation")
source("getADJNFL.R")
#uses: getSUPPLEMENTS.R
#creates: foodomics object
